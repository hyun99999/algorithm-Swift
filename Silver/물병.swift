
import Foundation

// n개의 물병이 있다. 각 물병에는 물을 무한대로 부을 수 있다.
// 처음에는 모든 물병에 물이 1리터씩 들어있다.
// 지민이는 한 번에 k개의 물병을 옮길 수 있다. 물을 낭비하지 않고, 이동을 한 번만하고 싶다.
// 따라서, 지민이는 물병의 물을 분배해서 k개를 넘지 않는 비어있지않은 물병을 만들려고 한다.

// 물은 다음과 같이 재분배 한다.
// 같은 양의 물이 들어있는 물병 두 개를 고른다. 한 개의 물병에 다른 한쪽에 있는 물을 모두 붓는다.
// 필요한 만큼 반복한다.

// 같은 양의 물이 들어있는 물병 두 개가 없을 수 있다. 이때는 상점에서 1리터 물병을 살 수 있다.
// 이때 상점에서 사야하는 물병의 최솟값은? 정답이 없는 경우 -1 을 출력.

let nk: [Int] = readLine()!.split(separator: " ").map { Int($0) ?? 0 }

// 아이디어: n이 홀수인 경우에 상점에서 1리터 물병을 산다.

var n: Int = nk[0]
let k: Int = nk[1]

// ✅ 아이디어:
// N보다 작고 가장 큰 2제곱값 구함.
// 남은 병들 중에 작고 가장 큰 2 제곱값 구함.
// 위 과정을 k-1 번 반복.
// 결과적으로 가장 작은 2 제곱값을 구해서 다음 제곱값까지의 차이의 물병을 사서 k번을 채우며 이동시킬 계획.

for _ in 0..<k - 1 {
    var bottle: Int = 0
    
    while n > Int(pow(2.0, Double(bottle))) {
        bottle += 1
    }
    n -= Int(pow(2.0, Double(bottle - 1)))
}

var last: Int = 0

while n > Int(pow(2.0, Double(last))) {
    last += 1
}

// MARK: - 출력

if n == 0 {
    print(0)
} else {
    print(Int(pow(2.0, Double(last))) - n)
}

/*
 13 2
 */

// 3

/*
 1000000 5
 */

// 15808
